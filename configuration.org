#+TITLE: Emacs configuration

* Initialize
** Perf config
   Adjust gc-cons-threshold. The default setting is too low for lsp-mode's needs due to the fact that client/server communication generates a lot of memory/garbage.
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 100000000)
   #+END_SRC

   Increase the amount of data which Emacs reads from the process. Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range.
   #+BEGIN_SRC emacs-lisp
     (setq read-process-output-max (* 1024 1024)) ;; 1mb
   #+END_SRC

** Add custom load path
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path (expand-file-name "my-packages" user-emacs-directory))
   #+END_SRC

** use-package
   Setup basic use-package interface
   #+BEGIN_SRC emacs-lisp
     (setq core-packages
           '(use-package))

     (defun ensure-packages (packages)
       (dolist (package packages)
         (unless (package-installed-p package)
           (package-install package))))

     (ensure-packages core-packages)
   #+END_SRC

   Enable auto-installing of packages using use-package
   #+BEGIN_SRC emacs-lisp
     (require 'use-package-ensure)
     (setq use-package-always-ensure t)
     (require 'use-package)
   #+END_SRC

   :ensure will install a package if it is not already installed, but it does not keep it up-to-date.
   To keep your packages updated automatically, one option is to use auto-package-update
   #+BEGIN_SRC elisp
     (use-package auto-package-update
       :config
       (setq auto-package-update-delete-old-versions t)
       (setq auto-package-update-hide-results t)
       (auto-package-update-maybe))
   #+END_SRC

   Use paradox as the default package interface
   #+BEGIN_SRC emacs-lisp
     (use-package paradox
       :config
       (paradox-enable))
   #+END_SRC

* Post Init
** Start Server
   Start server automatically. Use emacsclient to associate/open files.
   #+BEGIN_SRC emacs-lisp
     (use-package server
       :if window-system
       :config
       (unless (server-running-p)
         (server-start))
       )
   #+END_SRC

** Disable Command/Super Key on Mac systems
   Do this early, before any mappings are added.
   This is a problem on Macbook where option and command is weirdly placed.

   #+BEGIN_SRC emacs-lisp
     (defun global-unset-all-super-key ()
       "Will unset any single key in global keymap that has the super modifier."
       (let ((km (current-global-map)))
         (while km
           (let ((maybe-event (and (listp (car km))
                                   (caar km))))
             (if (and (eventp maybe-event) ; Also filters maybe-event when
                                             ; nil because (car km) was not a list.
                      (memq 'super (event-modifiers maybe-event)))
                 (global-unset-key (vector maybe-event))))
           (setq km (cdr km)))))

     (provide 'global-unset-all-super-key)

     (when (string-equal system-type "darwin")
       (require 'global-unset-all-super-key)
       (global-unset-all-super-key))
   #+END_SRC

** Inhibit compacting font cache
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-compacting-font-caches t)
   #+END_SRC

** Turn off ad-handle-definition: `tramp-read-passwd' got redefined
   #+BEGIN_SRC emacs-lisp
     (setq ad-redefinition-action 'accept)
   #+END_SRC

** Change "yes or no" to "y or n"

   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Shell/exec-path-from-shell
   #+BEGIN_SRC emacs-lisp
     ;; exec-path-from-shell
     (use-package exec-path-from-shell
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC
** Character Encodings
   #+BEGIN_SRC emacs-lisp
     (set-default-coding-systems 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-language-environment 'utf-8)
     (setq locale-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
     (when (display-graphic-p)
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
   #+END_SRC
* Config Helpers
** Enable minor mode
   #+BEGIN_SRC emacs-lisp
     (defun enable-minor-mode (my-pair)
       "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
       (if (buffer-file-name)
           (if (string-match (car my-pair) buffer-file-name)
               (funcall (cdr my-pair)))))
   #+END_SRC

* Appearance/Visual
** Load colour theme
*** doom-themes
    #+BEGIN_SRC emacs-lisp
      (use-package doom-themes
        :config
        ;; Global settings (defaults)
        (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
              doom-themes-enable-italic t) ; if nil, italics is universally disabled

        ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
        ;; may have their own settings.
        (load-theme 'doom-dracula t)

        ;; Enable flashing mode-line on errors
        (doom-themes-visual-bell-config)

        ;; Enable custom neotree theme (all-the-icons must be installed!)
        (doom-themes-neotree-config)

        ;; Corrects (and improves) org-mode's native fontification.
        (doom-themes-org-config)
        )
    #+END_SRC
** Icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)
   #+END_SRC

** Fonts
   #+BEGIN_SRC emacs-lisp
     (use-package unicode-fonts
       :config
       (unicode-fonts-setup))
   #+END_SRC

** Set font, size
*** Set font and size
    #+BEGIN_SRC emacs-lisp
      (set-frame-font "Hack 14")
    #+END_SRC

*** Change font-size with ctrl + mouse wheel
    #+BEGIN_SRC emacs-lisp
      (global-set-key (vector (list 'control mouse-wheel-down-event)) 'text-scale-increase)
      (global-set-key (vector (list 'control mouse-wheel-up-event))   'text-scale-decrease)
    #+END_SRC
** Hide welcome message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC

** Hide initial scratch buffer message
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil)
   #+END_SRC

** Hide toolbar
   #+BEGIN_SRC emacs-lisp
     (if window-system
         (tool-bar-mode -1))
     (if window-system
         (menu-bar-mode -1))
   #+END_SRC

** Hide scrollbar
   #+BEGIN_SRC emacs-lisp
     (scroll-bar-mode -1)
   #+END_SRC

** Switch window to fullscreen
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist '(fullscreen . maximized))
   #+END_SRC

** Disable emacs window disappearing on Ctrl-z
   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-z"))
   #+END_SRC

** Simplify whitespace style
   #+BEGIN_SRC emacs-lisp
     (setq-default whitespace-style (quote (spaces tabs newline space-mark tab-mark newline-mark)))
   #+END_SRC
** Enable soft-wrap lines
   #+BEGIN_SRC emacs-lisp
     (global-visual-line-mode t)
   #+END_SRC

** Enable smooth scrolling
   #+BEGIN_SRC emacs-lisp
     ;;(use-package smooth-scrolling)
     ;;(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

     (setq scroll-conservatively 101) ;; move minimum when cursor exits view, instead of recentering
     (setq mouse-wheel-scroll-amount '(5)) ;; mouse scroll moves 1 line at a time, instead of 5 lines
     (setq mouse-wheel-progressive-speed nil) ;; on a long mouse scroll keep scrolling by 1 line
   #+END_SRC

** Change cursor from box to bar
   #+BEGIN_SRC emacs-lisp
     (setq-default cursor-type 'bar)
   #+END_SRC

** Highlight syntax
   Apply syntax highlighting to all buffers
   #+BEGIN_SRC emacs-lisp
     (global-font-lock-mode t)
   #+END_SRC
*** Highlight identifiers
    Color Identifiers is a minor mode for Emacs that highlights each source code identifier uniquely based on its name.
    https://github.com/ankurdave/color-identifiers-mode

    #+BEGIN_SRC emacs-lisp
      (use-package color-identifiers-mode
        :config
        (add-hook 'after-init-hook 'global-color-identifiers-mode)
        ;; Make the variables stand out, turn off highlighting for all other keywords in supported modes using a code like:
        (defun myfunc-color-identifiers-mode-hook ()
          (let ((faces '(font-lock-comment-face font-lock-comment-delimiter-face font-lock-constant-face font-lock-type-face font-lock-function-name-face font-lock-variable-name-face font-lock-keyword-face font-lock-string-face font-lock-builtin-face font-lock-preprocessor-face font-lock-warning-face font-lock-doc-face font-lock-negation-char-face font-lock-regexp-grouping-construct font-lock-regexp-grouping-backslash)))
            (dolist (face faces)
              (face-remap-add-relative face '((:foreground "" :weight normal :slant normal)))))
          (face-remap-add-relative 'font-lock-keyword-face '((:weight bold)))
          (face-remap-add-relative 'font-lock-comment-face '((:slant italic)))
          (face-remap-add-relative 'font-lock-builtin-face '((:weight bold)))
          (face-remap-add-relative 'font-lock-preprocessor-face '((:weight bold)))
          (face-remap-add-relative 'font-lock-function-name-face '((:slant italic)))
          (face-remap-add-relative 'font-lock-string-face '((:slant italic)))
          (face-remap-add-relative 'font-lock-constant-face '((:weight bold))))
        ;; (add-hook 'color-identifiers-mode-hook 'myfunc-color-identifiers-mode-hook)

        )
    #+END_SRC

*** Highlight current line
    #+BEGIN_SRC emacs-lisp
      (global-hl-line-mode +1)
    #+END_SRC

*** Highlight indentation
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-indent-guides
        :config
        (setq highlight-indent-guides-method 'fill)
        (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
    #+END_SRC

*** Highlight delimiters
**** Show matching parentheses with 0 delay

     #+BEGIN_SRC emacs-lisp
       (show-paren-mode 1)
       (setq-default show-paren-delay 0)
     #+END_SRC

**** rainbow-mode

     Highlight matching delimiters parens, brackets, and braces with different colors
     https://www.emacswiki.org/emacs/RainbowDelimiters

     #+BEGIN_SRC emacs-lisp
       (use-package rainbow-delimiters
         :config
         (progn
           (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
     #+END_SRC

*** Highlight hex color strings

    This minor mode sets background color to strings that match color.
    https://elpa.gnu.org/packages/rainbow-mode.html

    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-mode
        :hook (css-mode sass-mode scss-mode web-mode html-mode))
    #+END_SRC

** Manage layout

   Save window layout history.
   #+BEGIN_SRC emacs-lisp
     (winner-mode 1)
   #+END_SRC

** Show line/col Numbers
*** Show Line col numbers
    #+BEGIN_SRC emacs-lisp
      (use-package nlinum
        :config
        (add-hook 'prog-mode-hook 'nlinum-mode))
    #+END_SRC

    nlinum-hl [tries to] remedy an issue in nlinum where line numbers disappear, due to a combination of bugs internal to nlinum and the fontification processes of certain major-modes and commands.
    Load this after nlinum
    #+BEGIN_SRC emacs-lisp
      (use-package nlinum-hl)
    #+END_SRC
*** Update line numbers format to avoid graphics glitches in fringe

    #+BEGIN_SRC emacs-lisp
      (setq-default linum-format " %4d ")
    #+END_SRC

*** Show column numbers

    #+BEGIN_SRC emacs-lisp
      ;; show column number
      (setq-default column-number-mode t)
    #+END_SRC
** Style the modeline
*** Doom Modeine
    #+BEGIN_SRC emacs-lisp
      (use-package doom-modeline
        :hook (after-init . doom-modeline-mode))
    #+END_SRC

*** Minion
    #+BEGIN_SRC emacs-lisp
      (use-package minions
        :config
        (minions-mode 1))
    #+END_SRC

*** Mode Icons
    #+BEGIN_SRC emacs-lisp
      (use-package mode-icons
        :config
        (mode-icons-mode))
    #+END_SRC
* Editing
** Set default tab char's display width to 4 spaces
   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 4)
     (setq-default indent-tabs-mode nil)
     ;; make tab key always call a indent command.
     (setq-default tab-always-indent t)
     ;; make tab key call indent command or insert tab character, depending on cursor position
     (setq-default tab-always-indent nil)
     ;; make tab key do indent first then completion.
     (setq-default tab-always-indent 'complete)
   #+END_SRC
** Set fill-column
   #+BEGIN_SRC emacs-lisp
     (setq-default fill-column 88)
   #+END_SRC

** Delete trailing whitespace before saving
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Copy/paste
*** Enable clipboard
    #+BEGIN_SRC emacs-lisp
      (setq select-enable-clipboard t)
    #+END_SRC
*** Save Interprogram paste
    https://www.reddit.com/r/emacs/comments/30g5wo/the_kill_ring_and_the_clipboard/
    #+BEGIN_SRC emacs-lisp
      (setq save-interprogram-paste-before-kill t)
    #+END_SRC

*** browse-kill-ring
    Look through everything you've killed recently
    https://github.com/browse-kill-ring/browse-kill-ring
    #+BEGIN_SRC emacs-lisp
      (use-package browse-kill-ring)
    #+END_SRC

*** Overwrite active region
    #+BEGIN_SRC emacs-lisp
      (delete-selection-mode t)
    #+END_SRC

** Indent new line automatically on ENTER
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "RET") 'newline-and-indent)
   #+END_SRC

** Duplicate current line
   #+BEGIN_SRC emacs-lisp
     (defun duplicate-line()
       (interactive)
       (move-beginning-of-line 1)
       (kill-line)
       (yank)
       (open-line 1)
       (next-line 1)
       (yank)
       )
     (global-set-key (kbd "C-c d") 'duplicate-line)
   #+END_SRC

** Insert pair of chars
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-[") 'insert-pair)
     (global-set-key (kbd "M-{") 'insert-pair)
     (global-set-key (kbd "M-\"") 'insert-pair)
   #+END_SRC

** Editor config
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :config
       (move-text-default-bindings))
   #+END_SRC

** Multiple Cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :config
       (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines))
   #+END_SRC

** Sorting lines
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c M-s") 'sort-lines)
   #+END_SRC

** Region
*** Operate on whole line or region
    https://github.com/purcell/whole-line-or-region/

    This minor mode allows functions to operate on the current line if they would normally operate on a region and region is currently undefined.

    #+BEGIN_SRC emacs-lisp
      (use-package whole-line-or-region)
    #+END_SRC

*** Enable moving line or region, up or down
    #+BEGIN_SRC emacs-lisp
      (use-package move-text
        :config
        (move-text-default-bindings))
    #+END_SRC

*** Expand region
    #+BEGIN_SRC emacs-lisp
      (use-package expand-region
        :config
        (global-set-key (kbd "C-=") 'er/expand-region))
    #+END_SRC

** Commenting
   https://github.com/remyferre/comment-dwim-2
   comment-dwim-2 is a replacement for the Emacs' built-in command comment-dwim

   #+BEGIN_SRC emacs-lisp
     (use-package comment-dwim-2
       :config
       (global-set-key (kbd "M-;") 'comment-dwim-2))
   #+END_SRC

** Key Bindings
   Utilities/helpers for key-bindings.

*** Which Key
**** Main
     #+BEGIN_SRC emacs-lisp
       (use-package which-key
         :defer 0.2
         :diminish
         :config (which-key-mode))
     #+END_SRC

**** which-key-posframe
     This package is a emacs-which-key extension, which use posframe to show which-key popup.
     #+BEGIN_SRC emacs-lisp
       (use-package which-key-posframe
         :config
         (which-key-posframe-mode))
     #+END_SRC

* Buffers
** Backup
*** Force emacs to save backups to a specific directory.

    #+BEGIN_SRC emacs-lisp
      (setq make-backup-files nil) ; stop creating backup~ files
      (setq auto-save-default nil) ; stop creating #autosave# files
      (setq create-lockfiles nil)  ; stop creating .#lock file links

      (setq backup-directory-alist
            `((".*" . ,temporary-file-directory)))
      (setq auto-save-file-name-transforms
            `((".*" ,temporary-file-directory t)))

      (setq backup-by-copying t    ; Don't delink hardlinks
            version-control t      ; Use version numbers on backups
            delete-old-versions t  ; Automatically delete excess backups
            kept-new-versions 20   ; how many of the newest versions to keep
            kept-old-versions 5    ; and how many of the old
            )

      (defun force-backup-of-buffer ()
        "Make a special 'per session' backup at the first save of each Emacs session."
        (when (not buffer-backed-up)
          ;; Override the default parameters for per-session backups.
          (let ((backup-directory-alist '(("" . temporary-file-directory)))
                (kept-new-versions 3))
            (backup-buffer)))
        ;; Make a "per save" backup on each save.  The first save results in
        ;; both a per-session and a per-save backup, to keep the numbering
        ;; of per-save backups consistent.
        (let ((buffer-backed-up nil))
          (backup-buffer)))
    #+END_SRC

*** Force backup of buffer before saving.

    #+BEGIN_SRC emacs-lisp
      (add-hook 'before-save-hook  'force-backup-of-buffer)
    #+END_SRC

** Kill buffer without confirmation

   #+BEGIN_SRC emacs-lisp
     (defun volatile-kill-buffer ()
       "Kill current buffer unconditionally."
       (interactive)
       (let ((buffer-modified-p nil))
         (kill-buffer (current-buffer))))
     (global-set-key (kbd "C-x k") 'volatile-kill-buffer)
   #+END_SRC

** Refresh buffer from filesystem periodically
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode t)
   #+END_SRC

** Show current file path

   #+BEGIN_SRC emacs-lisp
     (defun show-file-name ()
       "Show the full path file name in the minibuffer."
       (interactive)
       (message (buffer-file-name)))
     (global-set-key [C-f1] 'show-file-name)
   #+END_SRC

** Make buffer names unique
   #+BEGIN_SRC emacs-lisp
     (use-package uniquify
       :ensure nil
       :config (setq uniquify-buffer-name-style 'forward))
   #+END_SRC

* Tools
** Project Navigation
*** Bookmarks
    #+BEGIN_SRC emacs-lisp
      (use-package bm
        :demand t

        :init
        ;; restore on load (even before you require bm)
        (setq bm-restore-repository-on-load t)


        :config
        ;; Allow cross-buffer 'next'
        (setq bm-cycle-all-buffers t)

        ;; where to store persistant files
        (setq bm-repository-file "~/.emacs.d/bm-repository")

        ;; save bookmarks
        (setq-default bm-buffer-persistence t)

        ;; Loading the repository from file when on start up.
        (add-hook' after-init-hook 'bm-repository-load)

        ;; Restoring bookmarks when on file find.
        (add-hook 'find-file-hooks 'bm-buffer-restore)

        ;; Saving bookmarks
        (add-hook 'kill-buffer-hook #'bm-buffer-save)

        ;; Saving the repository to file when on exit.
        ;; kill-buffer-hook is not called when Emacs is killed, so we
        ;; must save all bookmarks first.
        (add-hook 'kill-emacs-hook #'(lambda nil
                                       (bm-buffer-save-all)
                                       (bm-repository-save)))

        ;; The `after-save-hook' is not necessary to use to achieve persistence,
        ;; but it makes the bookmark data in repository more in sync with the file
        ;; state.
        (add-hook 'after-save-hook #'bm-buffer-save)

        ;; Restoring bookmarks
        (add-hook 'find-file-hooks   #'bm-buffer-restore)
        (add-hook 'after-revert-hook #'bm-buffer-restore)

        ;; The `after-revert-hook' is not necessary to use to achieve persistence,
        ;; but it makes the bookmark data in repository more in sync with the file
        ;; state. This hook might cause trouble when using packages
        ;; that automatically reverts the buffer (like vc after a check-in).
        ;; This can easily be avoided if the package provides a hook that is
        ;; called before the buffer is reverted (like `vc-before-checkin-hook').
        ;; Then new bookmarks can be saved before the buffer is reverted.
        ;; Make sure bookmarks is saved before check-in (and revert-buffer)
        (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

        ;; Use mouse + left fring to handle bookmarks
        (global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
        (global-set-key (kbd "C-<mouse-4>") 'bm-next-mouse)
        ;; (global-set-key (kbd "C-<mouse-3>") 'bm-previous-mouse)

        :bind (("C-x p n" . bm-next)
               ("C-x p p" . bm-previous)
               ("C-x p t" . bm-toggle))
        )
    #+END_SRC
*** projectile
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :diminish projectile-mode
        :init
        (setq projectile-keymap-prefix (kbd "C-c p"))
        :config
        (projectile-global-mode)
        (setq projectile-completion-system 'default)
        (setq projectile-enable-caching t)
        )
    #+END_SRC

*** dump-jump
    #+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
        :config
        (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
    #+END_SRC
*** neotree
    #+BEGIN_SRC emacs-lisp
      (use-package neotree
        :config
        (global-set-key [f8] 'neotree-toggle)
        (setq neo-smart-open t)
        (setq-default neo-show-hidden-files t)
        (setq neo-theme 'icons)
        ;; (setq projectile-switch-project-action 'neotree-projectile-action)
        )

      (defun text-scale-twice ()(interactive)(progn(text-scale-adjust 0)(text-scale-decrease 2)))
      (add-hook 'neo-after-create-hook (lambda (_)(call-interactively 'text-scale-twice)))
    #+END_SRC

** Incremental narrowing
*** selectrum
    https://github.com/raxod502/selectrum

    #+BEGIN_SRC emacs-lisp
      (use-package selectrum
        :config
        (selectrum-mode +1))
    #+END_SRC

*** prescient
    Simple but effective sorting and filtering for Emacs.
    https://github.com/raxod502/prescient.el

    #+BEGIN_SRC emacs-lisp
      (use-package prescient)
      (use-package selectrum-prescient
        :config
        (selectrum-prescient-mode t)
        (prescient-persist-mode t))
      (use-package company-prescient
        :after company
        :config
        (company-prescient-mode t))
    #+END_SRC
** Search
*** ctrlf
    CTRLF (pronounced "control F") is an intuitive and efficient solution for single-buffer text search in Emacs.
    https://github.com/raxod502/ctrlf

    #+BEGIN_SRC emacs-lisp
      (use-package ctrlf
        :config
        (ctrlf-mode +1))
    #+END_SRC

*** thesilversearcher - ag
    #+BEGIN_SRC emacs-lisp
      (use-package ag
        :config
        ;; (setq-default ag-reuse-window 't)
        (setq-default ag-reuse-buffers 't)
        (setq-default ag-arguments '(
                                     "--smart-case"
                                     "--stats"
                                     "--ignore-dir" "migrations"
                                     "--ignore-dir" "node_modules"
                                     "--ignore-dir" "elpa"
                                     "--ignore-dir" "lib"
                                     "--ignore-dir" "build"
                                     "--ignore" "\*.min.js"
                                     "--ignore" "\*.min.css"
                                     "--ignore" "\*.csv"
                                     "--ignore" "\*.svg"
                                     "--ignore" "\*.json"
                                     "--ignore" "\*.yaml"
                                     "--ignore" "\*.yml"
                                     ))
        (global-set-key "\C-c\C-g" 'ag-project))
    #+END_SRC

** Completion
*** company
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :config
        (add-hook 'after-init-hook 'global-company-mode)
        (setq company-idle-delay 0.2
              company-minimum-prefix-length 1
              company-selection-wrap-around t
              company-tooltip-align-annotations t
              company-tooltip-flip-when-above nil
              company-tooltip-limit 10
              company-tooltip-minimum 3
              company-tooltip-margin 1
              company-transformers '(company-sort-by-occurrence)
              company-dabbrev-downcase nil)

        ;; Add yasnippet support for all company backends
        ;; https://github.com/syl20bnr/spacemacs/pull/179
        (defvar company-mode/enable-yas t "Enable yasnippet for all backends.")
        (defun company-mode/backend-with-yas (backend)
          (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
              backend
            (append (if (consp backend) backend (list backend))
                    '(:with company-yasnippet))))
        )
    #+END_SRC

***** company-statistics
      Company-statistics is a global minor mode built on top of the
      in-buffer completion system company-mode. The idea is to keep a
      log of a certain number of completions you choose, along with
      some context information, and use that to rank candidates the
      next time you have to choose — hopefully showing you likelier
      candidates at the top of the list.

      #+BEGIN_SRC emacs-lisp
        (use-package company-statistics
          :config
          (company-statistics-mode))
      #+END_SRC

***** COMMENT company-posframe
      Let company use child frame as its candidate menu.

      #+BEGIN_SRC emacs-lisp
        (use-package company-posframe
          :config
          (company-posframe-mode))
      #+END_SRC

***** COMMENT company-box
      A company front-end with icons.

      #+BEGIN_SRC emacs-lisp
        (use-package company-box
          :after company
          :diminish
          :hook (company-mode . company-box-mode)
          :init (setq company-box-icons-alist 'company-box-icons-all-the-icons)
          :config
          (setq company-box-backends-colors nil)
          (setq company-box-show-single-candidate t)
          (setq company-box-max-candidates 50)
          (with-eval-after-load 'all-the-icons
            (declare-function all-the-icons-faicon 'all-the-icons)
            (declare-function all-the-icons-material 'all-the-icons)
            (setq company-box-icons-all-the-icons
                  `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.9 :v-adjust -0.2))
                    (Text . ,(all-the-icons-faicon "text-width" :height 0.85 :v-adjust -0.05))
                    (Method . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
                    (Function . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
                    (Constructor . ,(all-the-icons-faicon "cube" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-purple))
                    (Field . ,(all-the-icons-faicon "tag" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-lblue))
                    (Variable . ,(all-the-icons-faicon "tag" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-lblue))
                    (Class . ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
                    (Interface . ,(all-the-icons-material "share" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                    (Module . ,(all-the-icons-material "view_module" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                    (Property . ,(all-the-icons-faicon "wrench" :height 0.85 :v-adjust -0.05))
                    (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.9 :v-adjust -0.2))
                    (Value . ,(all-the-icons-material "format_align_right" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                    (Enum . ,(all-the-icons-material "storage" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
                    (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.9 :v-adjust -0.2))
                    (Snippet . ,(all-the-icons-material "format_align_center" :height 0.9 :v-adjust -0.2))
                    (Color . ,(all-the-icons-material "palette" :height 0.9 :v-adjust -0.2))
                    (File . ,(all-the-icons-faicon "file-o" :height 0.9 :v-adjust -0.05))
                    (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.9 :v-adjust -0.2))
                    (Folder . ,(all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05))
                    (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-lblue))
                    (Constant . ,(all-the-icons-faicon "square-o" :height 0.9 :v-adjust -0.05))
                    (Struct . ,(all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.2 :face 'all-the-icons-orange))
                    (Event . ,(all-the-icons-faicon "bolt" :height 0.85 :v-adjust -0.05 :face 'all-the-icons-orange))
                    (Operator . ,(all-the-icons-material "control_point" :height 0.9 :v-adjust -0.2))
                    (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.85 :v-adjust -0.05))
                    (Template . ,(all-the-icons-material "format_align_center" :height 0.9 :v-adjust -0.2))))))
      #+END_SRC
** undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :config
       (global-undo-tree-mode 1)
       )
   #+END_SRC

** keyfreq
   #+BEGIN_SRC emacs-lisp
     (use-package keyfreq
       :config
       (keyfreq-mode 1)
       (keyfreq-autosave-mode 1))
   #+END_SRC
** Terminal
*** vterm
    #+BEGIN_SRC emacs-lisp
      (use-package vterm
        :config
        (setq vterm-buffer-name-string "%s"
              vterm-max-scrollback 100000
              vterm-kill-buffer-on-exit t)

        ;; Change the font in vterm buffers to a mono-spaced font (the fixed-pitch face)
        ;; if the default font in Emacs is a proportional font.
        (add-hook 'vterm-mode-hook
                  (lambda ()
                    (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch)
                    (buffer-face-mode t)))
        )
    #+END_SRC

*** better-shell
    #+BEGIN_SRC emacs-lisp
      (use-package better-shell
        :bind (("C-'" . better-shell-shell)
               ;;("C-;" . better-shell-remote-open)
               ))
    #+END_SRC

* Programming
** Snippets
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :config
       (yas-global-mode 1)
       (add-hook 'term-mode-hook (lambda()
                                   (setq yas-dont-activate-functions t))))
     (use-package yasnippet-snippets)
   #+END_SRC
** Formatting
    Auto-format source code in many languages using the same command for all languages.
    https://github.com/lassik/emacs-format-all-the-code

    #+BEGIN_SRC emacs-lisp
      (use-package format-all)
    #+END_SRC

** Version Control (git)
*** magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :config
        (setq magit-auto-revert-mode nil)
        (setq magit-last-seen-setup-instructions "1.4.0"))
    #+END_SRC

*** magit-delta
    Use magit + delta to show diffs.
    https://github.com/dandavison/magit-delta

    Install delta via instructions here:
    https://github.com/dandavison/delta

    #+BEGIN_SRC emacs-lisp
      (use-package magit-delta
        :config
        (magit-delta-mode))
    #+END_SRC

*** forge
    Forge allows you to work with Git forges, such as Github and Gitlab
    #+BEGIN_SRC emacs-lisp
      (use-package forge
        :after magit)
    #+END_SRC
*** vc-msg
    #+BEGIN_SRC emacs-lisp
      (use-package vc-msg)
    #+END_SRC
*** browse-at-remote
    #+BEGIN_SRC emacs-lisp
      (use-package browse-at-remote
        :bind ("C-c g g" . browse-at-remote)
        )
    #+END_SRC

*** git-timemachine
    #+BEGIN_SRC emacs-lisp
      (use-package git-timemachine
        :config)
    #+END_SRC
*** diff-hl
    Highlights uncommitted changes on the left side of the window, allows you to jump between and revert them selectively.
    #+BEGIN_SRC emacs-lisp
      (use-package diff-hl
        :config
        (global-diff-hl-mode)
        )
    #+END_SRC
** Language Server Protocol (LSP)
   https://emacs-lsp.github.io/lsp-mode/page/performance/

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :hook (python-mode lsp-enable-which-key-integration)
       ;; :hook ((lsp-mode . lsp-enable-which-key-integration))
       :commands lsp lsp-deferred
       :config
       (setq
        lsp-use-plists t
        lsp-idle-delay 0.5
        lsp-enable-symbol-highlighting t
        lsp-enable-snippet nil  ;; Not supported by company capf, which is the recommended company backend
                                             ; lsp-completion-provider :capf
        )

       ;; TODO: Move to python block
       (lsp-register-custom-settings
        '(("pyls.plugins.pyls_mypy.enabled" t t)
          ("pyls.plugins.pyls_mypy.live_mode" nil t)
          ("pyls.plugins.pyls_black.enabled" t t)
          ("pyls.plugins.pyls_isort.enabled" t t)

          ;; Disable these as they're duplicated by flake8
          ("pyls.plugins.pycodestyle.enabled" nil t)
          ("pyls.plugins.mccabe.enabled" nil t)
          ("pyls.plugins.pyflakes.enabled" nil t)))

       (use-package lsp-ui
         :config (setq lsp-ui-sideline-show-hover t
                       lsp-ui-sideline-delay 0.5
                       lsp-ui-doc-delay 5
                       lsp-ui-sideline-ignore-duplicates t
                       lsp-ui-doc-position 'bottom
                       lsp-ui-doc-alignment 'frame
                       lsp-ui-doc-header nil
                       lsp-ui-doc-include-signature t
                       lsp-ui-doc-use-childframe t)
         :commands lsp-ui-mode
         )

       ;; optionally if you want to use debugger
       (use-package dap-mode
         :config
         (setq dap-auto-configure-features '(sessions locals controls tooltip)))

       ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
       ;; (setq lsp-keymap-prefix "s-l")
       )
   #+END_SRC

** Python
   pip install python-language-server[all]

   #+BEGIN_SRC emacs-lisp
     ;; (use-package python-mode
     ;;   :ensure nil
     ;;   :hook (python-mode . lsp-deferred)
     ;;   :custom
     ;;   ;; NOTE: Set these if Python 3 is called "python3" on your system!
     ;;   ;; (python-shell-interpreter "python3")
     ;;   ;; (dap-python-executable "python3")
     ;;   (dap-python-debugger 'debugpy)
     ;;   :config
     ;;   (require 'dap-python)
     ;;   )

     ;; TODO: Move to use-package block
     (add-hook 'python-mode-hook
               (lambda ()
                 (setq indent-tabs-mode nil)
                 (setq tab-width 4)
                 (setq-default python-indent-guess-indent-offset nil)
                 (setq python-indent-offset 4)))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package pyvenv
       :hook python-mode
       :config
       (pyvenv-mode 1))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-prospector)
   #+END_SRC

** Coverage
   #+BEGIN_SRC emacs-lisp
     ;;(add-to-list 'load-path "~/.emacs.d/coverage-mode/")
     ;;(load "coverage-mode.el")
     ;;(require 'coverage-mode)
   #+END_SRC

** flycheck
*** Main
    #+BEGIN_SRC emacs-lisp
      (use-package let-alist)
      (use-package flycheck
        :init (global-flycheck-mode)
        :config
        (setq-default flycheck-checker-error-threshold 500)
        (setq-default flycheck-highlighting-mode 'lines)
        (setq-default flycheck-idle-change-delay 3)
        (setq-default flycheck-display-errors-delay 0))
    #+END_SRC

*** flycheck-posframe
    Display flycheck error messages via posframe.
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-posframe
        :after flycheck
        :config
        (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode)
        (flycheck-posframe-configure-pretty-defaults))
    #+END_SRC
** JSON
   #+BEGIN_SRC emacs-lisp
     ;;(use-package json-navigator)
     ;;(use-package tree-mode)  ;; Does this work in the json-navigator hierarcy window??
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :mode (("\\.yaml$" . yaml-mode)))
   #+END_SRC

** TOML
   #+BEGIN_SRC emacs-lisp
     (use-package toml-mode)
   #+END_SRC
** Env
   #+BEGIN_SRC emacs-lisp
     (use-package dotenv-mode
       :mode (("\\.env$" . dotenv-mode)))
   #+END_SRC

** HTML/Javascript
*** lsp-mode
    npm install -g typescript-language-server typescript vue-language-server

*** web-mode
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :mode (
               ("\\.css$" . web-mode)
               ("\\.html$" . web-mode)
               ("\\.js$" . web-mode)
               ("\\.json$" . web-mode)
               ("\\.jsx$" . web-mode)
               ("\\.tsx$" . web-mode)
               ("\\.vue$" . web-mode)
               ("\\.scss$" . web-mode)
               ("\\.less$" . web-mode))
        :config
        (setq-default indent-tabs-mode nil) ;; no TABS
        (setq web-mode-code-indent-offset 2)
        (setq web-mode-css-indent-offset 2)
        (setq web-mode-enable-auto-closing t)
        (setq web-mode-enable-auto-expanding t)
        (setq web-mode-enable-auto-opening t)
        (setq web-mode-enable-auto-pairing t)
        (setq web-mode-enable-auto-pairing t)
        (setq web-mode-enable-auto-quoting nil)
        (setq web-mode-enable-css-colorization t)
        (setq web-mode-enable-current-column-highlight t)
        (setq web-mode-enable-current-element-highlight t)
        (setq web-mode-js-indent-offset 2)
        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-content-types-alist
              '(("jsx" . "\\.js[x]?\\'")))

        ;; Default comment to //
        (setq-default web-mode-comment-formats (remove '("javascript" . "/*") web-mode-comment-formats))
        (add-to-list 'web-mode-comment-formats '("javascript" . "//"))
        )

      (use-package company-web);
    #+END_SRC
*** Javascript
**** Prettier
     #+BEGIN_SRC emacs-lisp
       (use-package prettier-js
         :config
         ;;(add-hook 'web-mode-hook 'prettier-js-mode)
         (add-hook 'web-mode-hook #'(lambda ()
                                      (enable-minor-mode
                                       '("\\.jsx?\\'" . prettier-js-mode))))
         )
     #+END_SRC
*** Typescript
    #+BEGIN_SRC
    (use-package tide
      :after (typescript-mode company flycheck)
      :hook ((typescript-mode . tide-setup)
             (typescript-mode . tide-hl-identifier-mode)
             (before-save . tide-format-before-save)))
    #+END_SRC

*** Emmet(Zencoding)
    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode)
    #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :hook (rust-mode . lsp))

     ;; Add keybindings for interacting with Cargo
     (use-package cargo
       :hook (rust-mode . cargo-minor-mode))

     (use-package flycheck-rust
       :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
   #+END_SRC

** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode)
     (add-hook 'markdown-mode-hook
               (lambda ()
                 (when buffer-file-name
                   (add-hook 'after-save-hook
                             'check-parens
                             nil t))))

     (use-package flymd)
     (defun my-flymd-browser-function (url)
       (let ((browse-url-browser-function 'browse-url-firefox))
         (browse-url url)))
     (setq flymd-browser-open-function 'my-flymd-browser-function)
   #+END_SRC

** dockerfile-mode
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :mode "Dockerfile$")
   #+END_SRC

* Notes
** org
*** Main config
    #+BEGIN_SRC emacs-lisp
      (use-package org
        :bind (
               ("C-c a" . org-agenda)
               ("C-c k" . org-capture)
               )
        :config
        ;; (global-set-key (kbd "C-c a") 'org-agenda)

        ;; Change ... to downward arrow when there's stuff under a header.
        (setq org-hide-leading-stars t)

        ;; Use syntax highlighting in source blocks while editing.
        (setq org-src-fontify-natively t)
        (font-lock-flush)

        ;; Make TAB act as if it were issued in a buffer of the language's major mode.
        (setq org-src-tab-acts-natively t)

        (setq org-support-shift-select 'always)

        ;; Highlight some keywords
        (setq org-todo-keyword-faces
              '(("TODO" . (:foreground "yellow" :weight bold))
                ("DONE" . "green")
                ))

        ;; ;; Save archive file after something is archived.
        (setq org-archive-subtree-save-file-p t)

        )
    #+END_SRC
*** org-superstar
    #+BEGIN_SRC emacs-lisp
      (use-package org-superstar
        :config
        (add-hook 'org-mode-hook (lambda () (org-superstar-mode t))))
    #+END_SRC

*** org-super-agenda
    #+BEGIN_SRC emacs-lisp
      (use-package org-super-agenda
        :config
        (org-super-agenda-mode))
    #+END_SRC

*** org-pretty-tags
    Add emojis to org tags.

    #+BEGIN_SRC emacs-lisp
      (use-package org-pretty-tags
        :config
        (setq org-pretty-tags-surrogate-strings
              (quote
               (
                ("idea" . "💡")
                ("learn" . "📖")
                ("blog" . "✍")
                ("music" . "🎵")
                )))
        (org-pretty-tags-global-mode))
    #+END_SRC

*** DOCT: Declarative Org Capture Templates
    #+BEGIN_SRC emacs-lisp
      (use-package doct
        ;;recommended: defer until calling doct
        :commands (doct))
    #+END_SRC
** org-roam
   #+BEGIN_SRC emacs-lisp
     (use-package org-roam
       :hook
       (after-init . org-roam-mode)
       :bind (:map org-roam-mode-map
                   (("C-c n l" . org-roam)
                    ("C-c n f" . org-roam-find-file)
                    ("C-c n g" . org-roam-show-graph))
                   :map org-mode-map
                   (("C-c n i" . org-roam-insert))))

     ;; (use-package org-roam-protocol)
   #+END_SRC
** deft
   Searching/Filtering notes
   #+BEGIN_SRC emacs-lisp
     (use-package deft
       :config
       (setq deft-extensions '("txt" "org"))
       (setq deft-directory "~/Projects/Notes/")
       (setq deft-recursive t)
       (global-set-key [f9] 'deft)
       )
   #+END_SRC
** org-journal
   #+BEGIN_SRC emacs-lisp
     (use-package org-journal
       :config
       (setq org-journal-dir "~/Projects/Notes/journal/")
       (setq org-journal-file-type "daily")
       )
   #+END_SRC

* Multimedia
** eradio
   eradio is a simple internet radio player for Emacs.
   https://github.com/olav35/eradio

   #+BEGIN_SRC emacs-lisp
     (use-package eradio
       :config
       ;;(global-set-key (kbd "C-c r p") 'eradio-play)
       ;;(global-set-key (kbd "C-c r s") 'eradio-stop)
       )


     (setq eradio-channels
           '(
             ("secretagent - somafm" . "http://somafm.com/secretagent130.pls")
             ("groovesalad - somafm"   . "http://somafm.com/groovesalad130.pls")
             ))
   #+END_SRC

* My Helpers
** Revert all buffers and ignore errors
   #+BEGIN_SRC emacs-lisp
     (defun sidmitra/revert-all-file-buffers ()
       "Refresh all open file buffers without confirmation.
     Buffers in modified (not yet saved) state in emacs will not be reverted. They
     will be reverted though if they were modified outside emacs.
     Buffers visiting files which do not exist any more or are no longer readable
     will be killed."
       (interactive)
       (dolist (buf (buffer-list))
         (let ((filename (buffer-file-name buf)))
           ;; Revert only buffers containing files, which are not modified;
           ;; do not try to revert non-file buffers like *Messages*.
           (when (and filename
                      (not (buffer-modified-p buf)))
             (if (file-readable-p filename)
                 ;; If the file exists and is readable, revert the buffer.
                 (with-current-buffer buf
                   (revert-buffer :ignore-auto :noconfirm :preserve-modes))
               ;; Otherwise, kill the buffer.
               (let (kill-buffer-query-functions) ; No query done when killing buffer
                 (kill-buffer buf)
                 (message "Killed non-existing/unreadable file buffer: %s" filename))))))
       (message "Finished reverting buffers containing unmodified files."))
   #+END_SRC

** Quote lines
   #+BEGIN_SRC emacs-lisp
     (defun xah-quote-lines ()
       "Change current text block's lines to quoted lines with comma or other separator char.
     When there is a text selection, act on the selection, else, act on a text block separated by blank lines.

     For example,

      cat
      dog
      cow

     becomes

      \"cat\",
      \"dog\",
      \"cow\",

     or

      (cat)
      (dog)
      (cow)

     If the delimiter is any left bracket, the end delimiter is automatically the matching bracket.

     URL `http://ergoemacs.org/emacs/emacs_quote_lines.html'
     Version 2020-06-26"
       (interactive)
       (let* (
              $p1
              $p2
              ($quoteToUse
               (read-string
                "Quote to use:" "\"" nil
                '(
                  ""
                  "\""
                  "'"
                  "("
                  "{"
                  "["
                  )))
              ($separator
               (read-string
                "line separator:" "," nil
                '(
                  ""
                  ","
                  ";"
                  )))
              ($beginQuote $quoteToUse)
              ($endQuote
               ;; if begin quote is a bracket, set end quote to the matching one. else, same as begin quote
               (let (($syntableValue (aref (syntax-table) (string-to-char $beginQuote))))
                 (if (eq (car $syntableValue ) 4) ; ; syntax table, code 4 is open paren
                     (char-to-string (cdr $syntableValue))
                   $quoteToUse
                   ))))
         (if (use-region-p)
             (setq $p1 (region-beginning) $p2 (region-end))
           (progn
             (if (re-search-backward "\n[ \t]*\n" nil "move")
                 (progn (re-search-forward "\n[ \t]*\n")
                        (setq $p1 (point)))
               (setq $p1 (point)))
             (re-search-forward "\n[ \t]*\n" nil "move")
             (skip-chars-backward " \t\n" )
             (setq $p2 (point))))
         (save-excursion
           (save-restriction
             (narrow-to-region $p1 $p2)
             (goto-char (point-min))
             (catch 'EndReached
               (while t
                 (skip-chars-forward "\t ")
                 (insert $beginQuote)
                 (end-of-line )
                 (insert $endQuote $separator)
                 (if (eq (point) (point-max))
                     (throw 'EndReached t)
                   (forward-char 1))))))))

   #+END_SRC

* My Workflow
** Registers
   #+BEGIN_SRC emacs-lisp
     (set-register ?t (cons 'file "~/Projects/Notes/todo.org"))
     (set-register ?i (cons 'file "~/.emacs.d/configuration.org"))
     (set-register ?s (cons 'file "~/Projects/Notes/scratch.org"))
   #+END_SRC

** File Paths
   #+BEGIN_SRC emacs-lisp
     (setq-default org-directory "~/Projects/Notes")
     (setq-default org-roam-directory "~/Projects/Notes/")
     (setq-default org-roam-index-file "index.org")
     (setq-default org-agenda-files '("~/Projects/Notes/todo.org"))
   #+END_SRC

** Airbase
   #+BEGIN_SRC emacs-lisp
     (defun airbase-enable () (interactive)
            ;; JS
            (setq web-mode-code-indent-offset 2)
            (setq web-mode-markup-indent-offset 2)
            (setq web-mode-css-indent-offset 2)
            (setq web-mode-js-indent-offset 2)
            ;;(prettier-js-mode 1)
            (setq prettier-args '())

            ;; Python
            (pyvenv-activate "~/Library/Caches/pypoetry/virtualenvs/airbase-backend-csyzUOJz-py3.8")
            ;; (lsp-deferred)

            ;; (add-hook 'before-save-hook 'py-isort-before-save)
            ;; (add-hook 'python-mode-hook 'blacken-mode)
            ;; (add-hook 'python-mode-hook 'lsp-deferred)
            ;; (setq lsp-enable-file-watchers nil)

            ;; (defun custom-python-flycheck-setup ()
            ;;   (setq-default flycheck-disabled-checkers
            ;;                 (append flycheck-disabled-checkers
            ;;                         '(python-pylint)))

            ;;   (setq-default flycheck-disabled-checkers
            ;;                 (append flycheck-disabled-checkers
            ;;                         '(python-flake8)))
            ;;   (flycheck-select-checker 'python-prospector))

            ;; (add-hook 'python-mode-hook #'custom-python-flycheck-setup)

            ;; (setq python-shell-completion-native-enable nil
            ;;       python-shell-interpreter "~/Projects/Airbase/airbase-backend/venv/bin/python"
            ;;       python-shell-interpreter-args "-i /home/sid/Projects/Airbase/airbase-backend/manage.py shell_plus")

            ;; (dap-register-debug-template "Airbase"
            ;;                    (list :type "python"
            ;;                          :args "-i"
            ;;                          :cwd nil
            ;;                          :env '(("DEBUG" . "1"))
            ;;                          :target-module (expand-file-name "~/src/myapp/.env/bin/myapp")
            ;;                          :request "launch"
            ;;                          :name "Airbase"))

            ;; unset run-python shortcut, interferes with helm-projectile open file
            (global-unset-key (kbd "C-c C-p"))
            )

     (defun airbase-disable () (interactive)
            )

     (defun airbase-enable-old () (interactive)
            ;; JS
            (setq web-mode-code-indent-offset 2)
            (setq web-mode-markup-indent-offset 2)
            (setq web-mode-css-indent-offset 2)
            (setq web-mode-js-indent-offset 2)
            ;;(prettier-js-mode 1)
            (setq prettier-args '())

            ;; Python
            (pyvenv-activate "~/Library/Caches/pypoetry/virtualenvs/airbase-backend-csyzUOJz-py3.8")
            (setq python-shell-interpreter "~/Library/Caches/pypoetry/virtualenvs/airbase-backend-csyzUOJz-py3.8/bin/python")
            (add-hook 'before-save-hook 'py-isort-before-save)
            (add-hook 'python-mode-hook 'blacken-mode)
            (add-hook 'python-mode-hook 'lsp-deferred)
            (setq lsp-enable-file-watchers nil)

            (defun custom-python-flycheck-setup ()
              (setq-default flycheck-disabled-checkers
                            (append flycheck-disabled-checkers
                                    '(python-pylint)))

              (setq-default flycheck-disabled-checkers
                            (append flycheck-disabled-checkers
                                    '(python-flake8)))
              (flycheck-select-checker 'python-prospector))

            (add-hook 'python-mode-hook #'custom-python-flycheck-setup)

            ;;(add-hook 'python-mode-hook 'eglot-ensure)
            ;; (setq python-shell-completion-native-enable nil
            ;;       python-shell-interpreter "~/Projects/Airbase/airbase-backend/venv/bin/python"
            ;;       python-shell-interpreter-args "-i /home/sid/Projects/Airbase/airbase-backend/manage.py shell_plus")

            ;; unset run-python shortcut, interferes with helm-projectile open file
            (global-unset-key (kbd "C-c C-p"))
            )

     ;; (defun airbase-djangoserver () (interactive)
     ;;        "Start django runserver on a terminal"
     ;;        (setq buffer-name "airbase-djangoserver")
     ;;        (sane-term-create)
     ;;        (rename-buffer buffer-name t)
     ;;        (comint-send-string buffer-name "cd ~/Projects/Airbase/airbase-backend\n")
     ;;        (comint-send-string buffer-name "source $(poetry env info -p)/bin/activate\n")
     ;;        (comint-send-string buffer-name "python manage.py runserver\n")
     ;;        )
     ;; (defun airbase-celery () (interactive)
     ;;        "Start celery worker on a terminal"
     ;;        (setq buffer-name "airbase-celery")
     ;;        (sane-term-create)
     ;;        (rename-buffer buffer-name t)
     ;;        (comint-send-string buffer-name "cd ~/Projects/Airbase/airbase-backend\n")
     ;;        (comint-send-string buffer-name "source $(poetry env info -p)/bin/activate\n")
     ;;        (comint-send-string buffer-name "celery --app=airbase_backend worker --loglevel=info -Ofair --queues=celery,fast\n")
     ;;        )
     ;; (defun airbase-reactserver () (interactive)
     ;;        "Start react frontend on a terminal"
     ;;        (setq buffer-name "airbase-reactserver")
     ;;        (sane-term-create)
     ;;        (rename-buffer buffer-name t)
     ;;        (comint-send-string buffer-name "cd ~/Projects/Airbase/airbase-frontend\n")
     ;;        (comint-send-string buffer-name "BROWSER=none yarn start\n")
     ;;        )
     ;; (defun airbase-djangoshell () (interactive)
     ;;        "Start django shell on a terminal"
     ;;        (setq buffer-name "airbase-djangoshell")
     ;;        (sane-term-create)
     ;;        (rename-buffer buffer-name t)
     ;;        (comint-send-string buffer-name "cd ~/Projects/Airbase/airbase-backend\n")
     ;;        (comint-send-string buffer-name "source $(poetry env info -p)/bin/activate\n")
     ;;        ;; (comint-send-string buffer-name "source ~/.profile\n")
     ;;        ;;(comint-send-string buffer-name "python manage.py shell_plus\n")
     ;;        )
     ;; (defun airbase-daemons () (interactive)
     ;;        "Start all daemons on a terminal"
     ;;        (airbase-djangoserver)
     ;;        (airbase-djangoshell)
     ;;        (airbase-reactserver)
     ;;        )


     (defun custom-ag-args () (interactive)
            (setq-default ag-arguments '(
                                         "--smart-case"
                                         "--stats"
                                         "--ignore-dir" "migrations"
                                         "--ignore-dir" "node_modules"
                                         "--ignore-dir" "elpa"
                                         "--ignore-dir" "lib"
                                         "--ignore-dir" "build"
                                         "--ignore" "\pdf_purchase_order.html"
                                         "--ignore" "\*.min.js"
                                         "--ignore" "\*.min.css"
                                         "--ignore" "\*.csv"
                                         "--ignore" "\*.svg"
                                         "--ignore" "\*.json"
                                         "--ignore" "\*.yaml"
                                         "--ignore" "\*.yml"
                                         ))
            )

     ;; Forcing django mode on all html
     ;; TODO: Better way to do this?
     (setq-default web-mode-engines-alist
                   '(("django"    . "\\.html\\'")))
   #+END_SRC

** CoreEcon
   #+BEGIN_SRC emacs-lisp
     (defun econ-enable () (interactive)
            (pyvenv-activate "~/Library/Caches/pypoetry/virtualenvs/coreecon-oReBlZOn-py3.7")
            )
   #+END_SRC
